name: Deploy to GitHub Pages

on:
  push:
    branches:
      - main

permissions:
  contents: write

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Clean install directories
        run: |
          rm -rf node_modules
          rm -f package-lock.json

      - name: Install Dependencies
        run: npm install

      - name: Install Terser
        run: npm install --save-dev terser

      - name: Fix Rollup Dependencies
        run: |
          cd node_modules/rollup
          npm install --no-save @rollup/rollup-linux-x64-gnu

      - name: Build
        run: npm run build

      - name: Fix HTML and adjust script tags
        run: |
          # Ensure the gptengineer.js script has type="module"
          grep -q 'type="module"' dist/index.html || sed -i 's|<script src="https://cdn.gpteng.co/gptengineer.js"|<script src="https://cdn.gpteng.co/gptengineer.js" type="module"|' dist/index.html

          # Check if our main script tag is present and add it if not
          if ! grep -q 'src="./assets/' dist/index.html; then
            # Find the main script file name in dist/assets
            MAIN_JS=$(find dist/assets -name "*.js" | grep -v "polyfill" | head -1 | sed 's|dist/||')
            # Add the script tag before closing body
            if [ -n "$MAIN_JS" ]; then
              sed -i "s|</body>|  <script type=\"module\" src=\"./$MAIN_JS\"></script>\n  </body>|" dist/index.html
            fi
          fi

      - name: Ensure CNAME and config files are copied
        run: |
          # Copy CNAME file
          if [ -f "CNAME" ]; then
            cp CNAME dist/
          fi
          if [ -f "public/CNAME" ]; then
            cp public/CNAME dist/
          fi
          # Force create CNAME file if it doesn't exist
          echo "connergroth.me" > dist/CNAME

          # Create GitHub Pages config
          echo '{ "dependencies": {}, "scripts": {} }' > dist/package.json

          # Create .nojekyll file
          touch dist/.nojekyll

          # Create .gitattributes file manually
          echo "*.js    linguist-language=JavaScript" > dist/.gitattributes
          echo "*.mjs   linguist-language=JavaScript" >> dist/.gitattributes
          echo "*.css   linguist-language=CSS" >> dist/.gitattributes
          echo "*.json  linguist-language=JSON" >> dist/.gitattributes
          echo "*.svg   linguist-language=SVG" >> dist/.gitattributes

          # Copy .htaccess if it exists
          if [ -f "public/.htaccess" ]; then
            cp public/.htaccess dist/
          fi

          # Create GitHub Pages specific content-type configuration
          echo '{"*.js":"application/javascript","*.mjs":"application/javascript","*.css":"text/css","*.json":"application/json","*.svg":"image/svg+xml"}' > dist/content-types.json

          # Create specific MIME type file for GitHub Pages
          mkdir -p dist/.well-known
          echo "application/javascript  .js" > dist/.well-known/mimetypes
          echo "application/javascript  .mjs" >> dist/.well-known/mimetypes
          echo "text/css                .css" >> dist/.well-known/mimetypes
          echo "application/json        .json" >> dist/.well-known/mimetypes
          echo "image/svg+xml           .svg" >> dist/.well-known/mimetypes

          # Ensure index.html exists
          if [ ! -f "dist/index.html" ]; then
            echo "WARNING: No index.html found in dist directory!"
          fi

      - name: Verify dist directory
        run: |
          echo "Contents of dist directory:"
          ls -la dist/
          echo "Checking for CNAME file:"
          cat dist/CNAME || echo "CNAME file not found!"
          echo "Checking if index.html exists:"
          test -f dist/index.html && echo "index.html exists" || echo "WARNING: index.html not found!"
          echo "Checking MIME type configuration:"
          ls -la dist/.well-known/ || echo "MIME type configuration not found!"
          echo "Contents of index.html:"
          cat dist/index.html

      - name: Deploy
        uses: JamesIves/github-pages-deploy-action@v4
        with:
          folder: dist # The folder the action should deploy
          branch: gh-pages # The branch to deploy to
          clean: true # Automatically remove deleted files from the deploy branch
